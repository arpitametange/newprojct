PASSWORDS


datagateway git ===
git render mongodbcluster
noreply@datagateway.in
Vector@2948#

mongodb cluster
username== arpita
username == noreply
password == 4fDFJGcJctgrxtUb


connection string  == mongodb+srv://noreply:4fDFJGcJctgrxtUb@cluster0.blwbjdl.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0








========

const { MongoClient, ServerApiVersion } = require('mongodb');
const uri = "mongodb+srv://noreply:4fDFJGcJctgrxtUb@cluster0.blwbjdl.mongodb.net/?appName=Cluster0";
// Create a MongoClient with a MongoClientOptions object to set the Stable API version
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  }
});
async function run() {
  try {
    // Connect the client to the server	(optional starting in v4.7)
    await client.connect();
    // Send a ping to confirm a successful connection
    await client.db("admin").command({ ping: 1 });
    console.log("Pinged your deployment. You successfully connected to MongoDB!");
  } finally {
    // Ensures that the client will close when you finish/error
    await client.close();
  }
}
run().catch(console.dir);

===============================
Creating a MongoDB database and obtaining a connection string involves several steps. Here’s a detailed guide to help you through the process:

Step 1: Sign Up for MongoDB Atlas
MongoDB Atlas is a cloud-based database service. If you don't have an account, sign up at MongoDB Atlas.

Step 2: Create a Cluster
Log in to MongoDB Atlas.
Create a new project (if you don't have one).
Create a new cluster:
Click on "Build a Cluster".
Select the free tier (or a paid option if you need more resources).
Choose a cloud provider and region.
Click "Create Cluster".
Step 3: Configure Your Cluster
Set up your cluster:
Wait for the cluster to be created (this might take a few minutes).
Add a database user:
Go to "Database Access" in the left sidebar.
Click "Add New Database User".
Choose a username and password (e.g., Pratiksha2000 for both as in your example).
Assign the necessary roles (default read and write access is usually sufficient).
Click "Add User".
Step 4: Whitelist Your IP Address
Go to "Network Access" in the left sidebar.
Click "Add IP Address".
Add your IP address or allow access from anywhere (not recommended for production).
Click "Confirm".
Step 5: Get the Connection String
Go to your cluster:
Click on "Clusters" in the left sidebar.
Click on "Connect" next to your cluster.
Choose your connection method:
Select "Connect your application".
Choose the driver and version you are using (e.g., Node.js, Python).
Copy the connection string:
You will see a connection string template like mongodb+srv://<username>:<password>@cluster0.sgy5ilc.mongodb.net/test?retryWrites=true&w=majority.
Replace <username> and <password> with the credentials you created (e.g., Pratiksha2000 for both).
Here is an example of what your connection string might look like:

plaintext
Copy code
mongodb+srv://Pratiksha2000:Pratiksha2000@cluster0.sgy5ilc.mongodb.net/?retryWrites=true&w=majority
Step 6: Connect to Your MongoDB Database
Use the connection string in your application to connect to the MongoDB database. Here’s a simple example using Node.js and the mongodb library:

Install the MongoDB library:

bash
Copy code
npm install mongodb
Connect to the database:

javascript
Copy code
const { MongoClient } = require('mongodb');

const uri = "mongodb+srv://Pratiksha2000:Pratiksha2000@cluster0.sgy5ilc.mongodb.net/?retryWrites=true&w=majority";
const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

async function run() {
  try {
    await client.connect();
    console.log("Connected to database!");
    // Perform actions on the collection object
  } finally {
    await client.close();
  }
}

run().catch(console.dir);
